plugins {
	id 'org.springframework.boot' version '2.6.4'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id "com.github.node-gradle.node" version "3.2.1"
	id 'java'
}

apply plugin: 'com.github.node-gradle.node'

group = 'Kim'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '15'



configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.eclipse.jgit:org.eclipse.jgit:6.1.0.202203080745-r'
	implementation group: 'org.eclipse.jgit', name: 'org.eclipse.jgit.ssh.jsch', version: '6.2.0.202206071550-r'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation group: 'org.javassist', name: 'javassist', version: '3.15.0-GA'
	implementation 'mysql:mysql-connector-java'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
	useJUnitPlatform()
}

node{
        version = '16.16.0' // 설치할 node 버전
        npmVersion = '8.11.0' // 설치할 yarn 버전
	yarnVersion = '1.13.0' // 설치할 yarn 버전
        download = true
        distBaseUrl = 'https://nodejs.org/dist' // node를 다운받을 수 있는 주소
        workDir = file("${project.rootDir}/nodejs") // node를 설치할 폴더를 설정
	yarnWorkDir = file("${project.rootDir}/yarn") // yarn을 설치할 폴더를 설정
}

task yarnInstallProduction(type: YarnTask) {
       args = ['install']
}

task nodeModuleInstall {
	doLast {
            nodeSetup.execute() // node를 설치
            yarnSetup.execute() // yarn을 설치
            yarnInstallProduction.execute() // package.json에 추가된 의존 모듈을 설치(yarn install)
        }
}

def frontendDir = "$projectDir/src/main/ownhubfront"

sourceSets {
	main {
		resources {
			srcDirs = ["$projectDir/src/main/resources"]
		}
	}
}

processResources {
	dependsOn "copyReactBuildFiles"
}


task installReact(type: Exec) {
	workingDir "$frontendDir"
	inputs.dir "$frontendDir"
	group = BasePlugin.BUILD_GROUP
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine "npm.cmd", "audit", "fix"
		commandLine 'npm.cmd', 'install'
	} else {
		commandLine "npm", "audit", "fix"
		commandLine 'npm', 'install'
	}
}

task buildReact(type: Exec) {
	dependsOn "installReact"
	workingDir "$frontendDir"
	inputs.dir "$frontendDir"
	group = BasePlugin.BUILD_GROUP
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine "npm.cmd", "run-script", "build"
	} else {
		commandLine "npm", "run-script", "build"
	}
}

task copyReactBuildFiles(type: Copy) {
	dependsOn "buildReact"
	from "$frontendDir/build"
	into "$buildDir/resources/main/static"
}

task buildAdmin(type: NpmTask) {
	args = ['run', 'build']
}
